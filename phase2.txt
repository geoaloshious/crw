var request = require("request");
var cheerio = require("cheerio");
process.setMaxListeners(10000);
process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;

process.on("uncaughtException", err => {
    console.log('Handling exception', err);
});

(async () => {
    function crequest(url, ret_arr) {
        return new Promise((resolve) => {
            request(url, (error, response, html) => {
                if (!error && response.statusCode == 200) {
                    if (ret_arr) {
                        let arr = html.split("\n");
                        arr.pop();
                        resolve(arr);
                    }
                    else resolve(html);
                } else {
                    if (ret_arr) resolve([]);
                    else resolve('');
                }
            });
        });
    }

    let site = Number(process.argv[2]);
    let slNo = Number(process.argv[3]);

    let proxyArraySize = 5;
    let urlLimit = 100;
    let sIndex = slNo * urlLimit;
    let eIndex = sIndex + urlLimit;

    var userAgents = await crequest('https://geoaloshious.github.io/crw/useragents.txt', true);
    var URLS = (await crequest(`https://geoaloshious.github.io/crw/urls/${site === 1 ? 'xvd' : 'xnxx'}.txt`, true)).slice(sIndex, eIndex);

    function proxyGenerator() {
        return new Promise((resolve) => {
            let ip_addresses = [];
            let port_numbers = [];

            request(
                'https://sslproxies.org',
                // 'https://www.socks-proxy.net/',
                function (error, response, html) {
                    if (!error && response.statusCode == 200) {
                        let $ = cheerio.load(html);
                        $("td:nth-child(1)").each((_, el) => ip_addresses.push($(el).text()));
                        $("td:nth-child(2)").each((_, el) => port_numbers.push($(el).text()));;
                    } else {
                        console.log("Error loading proxy, please try again");
                    }

                    let newArr = [[]];

                    ip_addresses.forEach((ip, i) => {
                        let obj = {
                            proxy: `http://${ip}:${port_numbers[i]}`,
                            // proxy: `socks5://${ip}:${port_numbers[i]}`,
                            ua: userAgents[Math.floor(Math.random() * userAgents.length)]
                        }

                        let lastElement = newArr[newArr.length - 1];

                        if (lastElement.length < proxyArraySize) {
                            lastElement.push(obj);
                        } else {
                            newArr.push([obj]);
                        }
                    });

                    resolve(newArr);
                }
            );
        });
    }

    function removeStringKey(key, input) {
        return input.replace(new RegExp(key + '=".*?"', 'g'), '');
    }

    function tempExecutr(scrip) {
        let tempvarxyz = {};
        scrip = scrip.replaceAll('window.xv', 'tempvarxyz');

        scrip = removeStringKey('href', scrip);
        scrip = removeStringKey('class', scrip);
        eval(scrip);
        return tempvarxyz;
    }

    function makeReq({ url, proxy, method, headers }) {
        return new Promise((resolve, reject) => {
            request({
                url,
                method,
                proxy,
                headers,
                rejectUnauthorized: false,
                timeout: 30000
            }, (error, response, body) => {
                if (!error && response.statusCode == 200) {
                    resolve({ response, body })
                }
                else {
                    reject(error)
                }
            });
        });
    };

    async function openPage(url, agent, proxy) {
        try {
            let html_req = await makeReq({
                url, proxy, method: 'GET', headers: {
                    'User-Agent': agent
                }
            });

            let session_token = html_req.response.headers['set-cookie'][1].split(';')[0];

            let $ = cheerio.load(html_req.body);
            let scriptt = $('script')[0].children[0].data;
            let result = tempExecutr(scriptt);

            let res_ads = result.conf.dyn.ads;
            // console.log(res_ads);

            let wpn_ad_cookie = '';//tracker_id

            try {
                let b = await makeReq({
                    url: `https://rpc-php.trafficfactory.biz/json/square-2//${res_ads.categories}/${res_ads.site}/${res_ads.tracker}///${res_ads.keywords}/1/content.json?v=${Math.random()}`,
                    proxy, method: 'GET', headers: {
                        'User-Agent': agent,
                        'Host': 'rpc-php.trafficfactory.biz',
                        'Origin': 'https://www.xvideos.com',
                        'Referer': url
                    }
                });

                let result = JSON.parse(b.body);
                wpn_ad_cookie = result.tracker_id;

                //Call banners
                let banners = result.banners[0];
                for (let i = 0; i < banners.length; i++) {
                    try {
                        makeReq({
                            url: banners[i].banner,
                            proxy, method: 'GET', headers: {
                                'User-Agent': agent,
                                'Referer': url
                            }
                        });
                    } catch (error) { }
                }
            } catch (error) { console.log('Error 1 : ', error) }

            try {
                let c = await makeReq({
                    url: `https://rpc-php.trafficfactory.biz/videosadsselect/footer-1//${res_ads.categories}/${res_ads.site}/${res_ads.tracker}///${res_ads.keywords}/1/content.json?v=${Math.random()}`,
                    proxy, method: 'GET', headers: {
                        'User-Agent': agent,
                        'Host': 'rpc-php.trafficfactory.biz',
                        'Origin': 'https://www.xvideos.com',
                        'Referer': url
                    }
                });

                let result = JSON.parse(c.body);
                wpn_ad_cookie = result.tracker_id;

                //Call banners
                let banners = result.banners[0];
                for (let i = 0; i < banners.length; i++) {
                    try {
                        makeReq({
                            url: banners[i].banner,
                            proxy, method: 'GET', headers: {
                                'User-Agent': agent,
                                'Referer': url
                            }
                        });
                    } catch (error) { }
                }
            } catch (error) { console.log('Error 2 : ', error) }
        } catch (error) { /*console.log(error)*/ }
    }

    async function openBrowser(arr) {
        for (let i = 0; i < arr.length; i++) {
            let { proxy, ua } = arr[i];
            await Promise.allSettled(URLS.map((u) => openPage(u, ua, proxy)));
        }
    }

    for (let i = 0; i < 5; i++) {
        console.time(i);
        let proxies = await proxyGenerator();
        await Promise.allSettled(proxies.map(openBrowser));
        console.timeEnd(i);
    }
})();
